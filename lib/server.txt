'use strict';
const notFound = require('./middleware/404.js');
const type = require('./middleware/type-check.js');
const express = require('express');
const uuid = require('uuid/v1');
const errorHandler = ('./middleware/500.js');

const app = express();

const PORT = process.env.PORT || 8080;

// function error500 (err,req,res,next) {
//   console.log('In the error handler');
//   res.status(500).send('WTF');
//   res.end();
// }

app.use(express.json());
let db = [];
app.use(typeCheck);

function typeCheck(req, res, next){
  if(req.body.name && req.body.display && req.body.description){
    if( (typeof(req.body.name)==='string') && (typeof(req.body.display)==='string') && (typeof(req.body.description)==='string') ){
      next();
    }
  }
  // error400(req, res);
  console.log('not found');
  res.status(400).send('400 user err error');
  // req.end();
}



function Record (body) {
  this.name = body.name;
  this.display = body.display;
  this.description = body.description;
  this.id = Math.floor( Math.random() * 1000 );
}


app.use( (req,res,next) => {
  console.log('LOG:', req.method, req.path);
  next();
});


app.get('/categories', (req,res,next) => {
  // console.log(req, res);
  let count = db.length;
  let results = db;
  res.json({count,results});
});

// app.get('/categories', (req, res, next) =>  {
//   console.log('app get');
//   let count = db.length;
//   let results = db;
//   res.json({count,results});
// });

app.get('/categories/:id', (req,res,next) => {
  let id = req.params.id;
  let record = db.filter((record) => record.id === parseInt(id));
  res.json(record[0]);
});

app.post('/categories', typeCheck, (req,res, next) => {
  let record = new Record(req.body);
  db.push(record);
  console.log(db);
  res.json(record);
});


app.put('/categories/:id', typeCheck, (req,res, next) => {
  let id = parseInt(req.params.id); //id the of the record to change
  let record = new Record(req.body);
  if(record.name){
    record.id = id;
  }
  for(let i = 0; i < db.length; i++){
    if(record.id === db[i]['id']){
      db[i] = record;
    }
  }
  res.json(record);
});

app.delete('/categories/:id', (req,res,next) => {
  let id = parseInt( req.params.id );
  db = db.filter((record) => record.id !== id );
  res.status(200).send({});
});

/////////////post rec files
function PostRec (body) {
  if(body.name && body.display && body.description){
    this.name = body.name;
    this.category = body.category;
    this.display = body.display;
    this.description = body.description;
    this.id = Math.floor( Math.random() * 1000 );
  }
  else return null;
}


app.use( (req,res,next) => {
  console.log('LOG:', req.method, req.path);
  next();
});

app.get('/products', (req,res,next) => {
  let count = db.length;
  let results = db;
  res.json({count,results});
});

app.get('/products/:id', (req,res,next) => {
  let id = req.params.id;
  let record = db.filter((record) => record.id === parseInt(id));
  res.json(record[0]);
});


app.post('/products', (req,res,next) => {
  let record = new PostRec(req.body);
  db.push(record);
  res.json(record);
});

app.put('/products/:id', (req,res,next) => {
  let id = parseInt(req.params.id); //id the of the record to change
  let record = new PostRec(req.body);
  if(record.name){
    record.id = id;
  }
  for(let i = 0; i < db.length; i++){
    if(record.id === db[i]['id']){
      db[i] = record;
    }
  }
  res.json(record);
});

app.delete('/products/:id', (req,res,next) => {
  let id = parseInt( req.params.id );
  db = db.filter((record) => record.id !== id );
  res.status(200).send({});
});

// app.use('*', notFound);
// app.use(error500);

module.exports = {
  server: app,
  start: port => {
    let PORT = port || process.env.PORT || 8080;
    app.listen(PORT, () => console.log(`Listening on ${PORT}`));
  },
};
